import InputError from '@/Components/InputError';
import InputLabel from '@/Components/InputLabel';
import PrimaryButton from '@/Components/PrimaryButton';
import TextInput from '@/Components/TextInput';
import { Link, useForm, usePage } from '@inertiajs/react';
import { useState, useEffect } from 'react';

export default function UpdateProfileInformationForm({ mustVerifyEmail, status, className = '' }) {
    const user = usePage().props.auth.user;

    const { data, setData, patch, errors, processing, recentlySuccessful } = useForm({
        name: user.name,
        lastName: user.lastName,
        email: user.email,
        phone: user.phone,
        photo: null,
        photoUrl: user.photoUrl,
    });

    const [photoPreview, setPhotoPreview] = useState(user.photoUrl ? `/${user.photoUrl}` : null);

    const handlePhotoChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setData('photo', file);
            setPhotoPreview(URL.createObjectURL(file));
        }
    };

    useEffect(() => {
        const baseUrl = window.location.origin;
        const fullPhotoUrl = user.photoUrl ? `${baseUrl}/${user.photoUrl}` : null;
        setPhotoPreview(fullPhotoUrl);
    }, [user.photoUrl]);

    const submit = (e) => {
        e.preventDefault();
        const formData = new FormData();
        formData.append('name', data.name);
        formData.append('lastName', data.lastName);
        formData.append('email', data.email);
        formData.append('phone', data.phone);
        if (data.photo) {
            formData.append('photoUrl', data.photo); // Ensure photo is sent
        }
        
        // Log the form data
        for (let pair of formData.entries()) {
            console.log(pair[0]+ ', '+ pair[1]);
        }
        patch(route('profile.update'), {
            data: formData,
            forceFormData: true,
        });
    };

    return (
        <section className={className}>
            <header>
                <h2 className="text-lg font-medium text-gray-900">Profile Information</h2>
                <p className="mt-1 text-sm text-gray-600">Update your account's profile information and email
                    address.</p>
            </header>

            {/* Avatar and Name */}
            <div className="flex items-center mt-4">
                {photoPreview ? (
                    <img
                        src={photoPreview}
                        alt="User Avatar"
                        className="bg-gray-300 rounded-lg mr-4"
                        style={{marginLeft: '100px', width: '100px', height: '100px', borderRadius: '16px'}} // Размер и закругление
                    />
                ) : (
                    <div
                        className="bg-gray-300 rounded-lg mr-4"
                           style={{width: '70px', height: '70px', borderRadius: '16px'}} // Размер и закругление
                    ></div>
                )}
                <span style={{ marginLeft: '50px' }} className="text-xl font-medium text-gray-900">
        <b>{user.name} {user.lastName}</b>
    </span>
            </div>

            <form onSubmit={submit} className="mt-6 space-y-6">
                {/* Name Field */}
                <div>
                    <InputLabel htmlFor="name" value="Name"/>
                    <TextInput
                        id="name"
                        value={data.name}
                        onChange={(e) => setData('name', e.target.value)}
                        required
                        className="form-control w-100"
                    />
                    <InputError message={errors.name} className="mt-2 text-red-500"/>
                </div>

                {/* Last Name Field */}
                <div>
                    <InputLabel htmlFor="lastName" value="Last Name"/>
                    <TextInput
                        id="lastName"
                        value={data.lastName}
                        onChange={(e) => setData('lastName', e.target.value)}
                        required
                        className="form-control w-100"
                    />
                    <InputError message={errors.lastName} className="mt-2 text-red-500"/>
                </div>

                {/* Email Field */}
                <div>
                    <InputLabel htmlFor="email" value="Email"/>
                    <TextInput
                        id="email"
                        type="email"
                        value={data.email}
                        onChange={(e) => setData('email', e.target.value)}
                        required
                        className="form-control w-100"
                    />
                    <InputError message={errors.email} className="mt-2 text-red-500"/>
                </div>

                {/* Phone Field */}
                <div>
                    <InputLabel htmlFor="phone" value="Phone"/>
                    <TextInput
                        id="phone"
                        value={data.phone}
                        onChange={(e) => setData('phone', e.target.value)}
                        className="form-control w-100"
                    />
                    <InputError message={errors.phone} className="mt-2 text-red-500"/>
                </div>

                {/* Photo Field */}
                <div>
                    <InputLabel htmlFor="photo" value="Photo"/>
                    <input
                        id="photo"
                        type="file"
                        name="photo"
                        onChange={handlePhotoChange}
                        className="mt-1 block w-full"
                    />
                    <InputError message={errors.photo} className="mt-2 text-red-500"/>
                </div>

                {/* Email Verification */}
                {mustVerifyEmail && user.email_verified_at === null && (
                    <div>
                        <p className="text-sm mt-2 text-gray-800">
                            Your email address is unverified.
                            <Link href={route('verification.send')} method="post" as="button"
                                  className="text-blue-600 hover:text-blue-800">
                                Click here to re-send the verification email.
                            </Link>
                        </p>
                        {status === 'verification-link-sent' && (
                            <div className="mt-2 text-green-600">A new verification link has been sent to your email
                                address.</div>
                        )}
                    </div>
                )}

                <div className="flex items-center gap-4">
                    <PrimaryButton disabled={processing} className="btn btn-primary">Save</PrimaryButton>
                    {recentlySuccessful && <span className="text-green-600 ml-3">Saved.</span>}
                </div>
            </form>
        </section>
    );
}

 const handleDeleteCar = (id) => {
        //if (confirm('Are you sure you want to delete this car?')) {
            Inertia.delete(route('car.destroy', id), {
                preserveScroll: true,
                onSuccess: () => {
                    console.log('Car deleted successfully.');
                },
                onError: (errors) => {
                    console.error('Error deleting car:', errors);
                }
            });
       // }
    };
<button
                                style={{marginLeft: '50px'}}
                                className="btn btn-danger ml-4"
                                onClick={() => handleDeleteCar(car.id)}
                            >
                                Delete Car
                            </button>
